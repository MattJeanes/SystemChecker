sudo: required
language: csharp
mono: none
cache: yarn
dist: xenial
dotnet: 2.2.301
if: tag IS blank

services:
  - docker
  
before_script:
  - export major=$(cat meta.json | jq '.version.major')
  - export minor=$(cat meta.json | jq '.version.minor')
  - export patch=$(cat meta.json | jq '.version.patch')
  - export version=$major.$minor.$patch
  - export DOCKER_CLI_EXPERIMENTAL=enabled
  - nvm install 10.7.0
  - nvm use 10.7.0

script:
  - yarn --cwd SystemChecker.Web/ClientApp
  - |
    for appname in SystemChecker.Service SystemChecker.Web SystemChecker.Migrations; do
      app=`echo $appname | tr '[:upper:]' '[:lower:]'`
      docker build -t $DOCKER_USER/$app -t $DOCKER_USER/$app:$version-amd64 -t $DOCKER_USER/$app:$version-amd64 -f "$appname/Dockerfile" . --build-arg arch=stretch-slim
      docker build -t $DOCKER_USER/$app -t $DOCKER_USER/$app:latest-arm32v7 -t $DOCKER_USER/$app:$version-arm32v7 -f "$appname/Dockerfile" . --build-arg arch=stretch-slim-arm32v7
      dotnet publish ./$appname/$appname.csproj -o "../publish/$appname" --configfile ./.nuget/nuget.config
    done
  
after_success:
  - git config --local user.name "$GITHUB_USER"
  - git config --local user.email "$GITHUB_EMAIL"
  - deploy=false
  - git fetch --tags
  - git rev-parse "$version" >/dev/null 2>&1 && { deploy=false; echo "$version tag already exists, not deploying"; } || { git tag "$version"; deploy=true; echo "$version tag created, deploying" ; }

before_deploy:
  - docker login -u $DOCKER_USER -p $DOCKER_PASS
  - cd ./publish
  - |
    for appname in SystemChecker.Service SystemChecker.Web SystemChecker.Migrations; do
      app=`echo $appname | tr '[:upper:]' '[:lower:]'`
      for ver in $version latest; do
        for arch in amd64 arm32v7; do
          docker push $DOCKER_USER/$app:$ver-$arch
        done
        docker manifest create $DOCKER_USER/$app:$ver $DOCKER_USER/$app:$ver-amd64 $DOCKER_USER/$app:$ver-arm32v7
        docker manifest annotate $DOCKER_USER/$app:$ver $DOCKER_USER/$app:$ver-amd64 --os linux --arch amd64
        docker manifest annotate $DOCKER_USER/$app:$ver $DOCKER_USER/$app:$ver-arm32v7 --os linux --arch arm
        docker manifest push $DOCKER_USER/$app:$ver
      done
      cd ./$appname && zip -q -r ../$appname.zip * && cd ../
    done
  - pwd && ls && cd ../
deploy:
  provider: releases
  api_key: "${GITHUB_TOKEN}"
  file_glob: true
  file: publish/*.zip
  skip_cleanup: true
  on:
    condition: $deploy = true
